{"version":3,"sources":["jsdelivr-header.js","/npm/marked-highlight@2.2.1/src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,ACNO,SAAS,EAAgB,GAO9B,GANuB,mBAAZ,IACT,EAAU,CACR,UAAW,KAIV,GAAwC,mBAAtB,EAAQ,UAC7B,MAAM,IAAI,MAAM,mCAWlB,MARkC,iBAAvB,EAAQ,aACjB,EAAQ,WAAa,aAGe,iBAA3B,EAAQ,iBACjB,EAAQ,eAAiB,IAGpB,CACL,QAAS,EAAQ,MACjB,UAAA,CAAW,GACT,GAAmB,SAAf,EAAM,KACR,OAGF,MAAM,EAAO,EAAQ,EAAM,MAE3B,GAAI,EAAQ,MACV,OAAO,QAAQ,QAAQ,EAAQ,UAAU,EAAM,KAAM,EAAM,EAAM,MAAQ,KAAK,KAAK,EAAY,IAGjG,MAAM,EAAO,EAAQ,UAAU,EAAM,KAAM,EAAM,EAAM,MAAQ,IAC/D,GAAI,aAAgB,QAClB,MAAM,IAAI,MAAM,mKAElB,EAAY,EAAZ,CAAmB,EACzB,EACI,gBAAgB,EAChB,SAAU,CACR,IAAA,CAAK,EAAM,EAAY,GAED,iBAAT,IACT,EAAU,EAAK,QACf,EAAa,EAAK,KAClB,EAAO,EAAK,MAEd,MAAM,EAAO,EAAQ,GACf,EAAa,EAAO,EAAQ,WAAa,EAAO,GAAQ,EAAQ,eAChE,EAAY,EACd,WAAW,KACX,GAEJ,OADA,EAAO,EAAK,QAAQ,MAAO,IACpB,aAAa,KAAa,EAAU,EAAO,EAAO,GAAM,mBACvE,GAGA,CAEA,SAAS,EAAQ,GACf,OAAQ,GAAQ,IAAI,MAAM,OAAO,EACnC,CAEA,SAAS,EAAY,GACnB,OAAQ,IACc,iBAAT,GAAqB,IAAS,EAAM,OAC7C,EAAM,SAAU,EAChB,EAAM,KAAO,EACnB,CAEA,CAGA,MAAM,EAAa,UACb,EAAgB,IAAI,OAAO,EAAW,OAAQ,KAC9C,EAAqB,oDACrB,EAAwB,IAAI,OAAO,EAAmB,OAAQ,KAC9D,EAAqB,CACzB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,SAED,EAAwB,GAAO,EAAmB,GACxD,SAAS,EAAO,EAAM,GACpB,GAAI,GACF,GAAI,EAAW,KAAK,GAClB,OAAO,EAAK,QAAQ,EAAe,QAGrC,GAAI,EAAmB,KAAK,GAC1B,OAAO,EAAK,QAAQ,EAAuB,GAI/C,OAAO,CACT,Q","file":"/npm/marked-highlight@2.2.1/src/index.js/+esm","sourceRoot":"","sourcesContent":["/**\n * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.37.0.\n * Original file: /npm/marked-highlight@2.2.1/src/index.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","export function markedHighlight(options) {\n  if (typeof options === 'function') {\n    options = {\n      highlight: options,\n    };\n  }\n\n  if (!options || typeof options.highlight !== 'function') {\n    throw new Error('Must provide highlight function');\n  }\n\n  if (typeof options.langPrefix !== 'string') {\n    options.langPrefix = 'language-';\n  }\n\n  if (typeof options.emptyLangClass !== 'string') {\n    options.emptyLangClass = '';\n  }\n\n  return {\n    async: !!options.async,\n    walkTokens(token) {\n      if (token.type !== 'code') {\n        return;\n      }\n\n      const lang = getLang(token.lang);\n\n      if (options.async) {\n        return Promise.resolve(options.highlight(token.text, lang, token.lang || '')).then(updateToken(token));\n      }\n\n      const code = options.highlight(token.text, lang, token.lang || '');\n      if (code instanceof Promise) {\n        throw new Error('markedHighlight is not set to async but the highlight function is async. Set the async option to true on markedHighlight to await the async highlight function.');\n      }\n      updateToken(token)(code);\n    },\n    useNewRenderer: true,\n    renderer: {\n      code(code, infoString, escaped) {\n        // istanbul ignore next\n        if (typeof code === 'object') {\n          escaped = code.escaped;\n          infoString = code.lang;\n          code = code.text;\n        }\n        const lang = getLang(infoString);\n        const classValue = lang ? options.langPrefix + escape(lang) : options.emptyLangClass;\n        const classAttr = classValue\n          ? ` class=\"${classValue}\"`\n          : '';\n        code = code.replace(/\\n$/, '');\n        return `<pre><code${classAttr}>${escaped ? code : escape(code, true)}\\n</code></pre>`;\n      },\n    },\n  };\n}\n\nfunction getLang(lang) {\n  return (lang || '').match(/\\S*/)[0];\n}\n\nfunction updateToken(token) {\n  return (code) => {\n    if (typeof code === 'string' && code !== token.text) {\n      token.escaped = true;\n      token.text = code;\n    }\n  };\n}\n\n// copied from marked helpers\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n"]}